# Generated by Django 5.1.6 on 2025-05-05 17:19

import django.core.validators
import django.db.models.deletion
import the_school.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Label for the academic year (e.g., 2025).', max_length=4, unique=True)),
                ('start_date', models.DateField(help_text='Date when this academic year begins.')),
                ('end_date', models.DateField(help_text='Date when this academic year ends.')),
                ('is_active', models.BooleanField(default=True, help_text='Can users interact with this academic year?')),
                ('is_closed', models.BooleanField(default=False, help_text='Marking as closed prevents further edits or associations.')),
                ('is_current', models.BooleanField(default=False, help_text='The currently in-use academic year. Only one allowed.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Academic Year',
                'verbose_name_plural': 'Academic Years',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Accreditor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('registration_number', models.CharField(max_length=100, unique=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('accreditation_date', models.DateField()),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Expired', 'Expired'), ('Pending', 'Pending')], default='Active', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='GradeLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade_number', models.PositiveSmallIntegerField(help_text='Numeric value of the grade (e.g., 9 for Grade 9).', unique=True)),
                ('year_level', models.PositiveSmallIntegerField(help_text='Optional internal academic level indicator (e.g., 1 for Grade 9).')),
                ('reference_code', models.CharField(help_text='Short code used internally or on transcripts (e.g., G9, G12).', max_length=10, unique=True)),
                ('display_name', models.CharField(help_text="Display name for UI (e.g., 'Grade 9', 'Form 1').", max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Grade Level',
                'verbose_name_plural': 'Grade Levels',
                'ordering': ['grade_number'],
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique department code (e.g., SCI, MAT, ICT).', max_length=10, unique=True)),
                ('name', models.CharField(help_text='Full name of the department (e.g., Computer Science).', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Optional description of the departmentâ€™s purpose or focus.', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Toggle to deactivate departments without deleting.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('head_of_department', models.ForeignKey(blank=True, help_text='Optional: Assign a department head.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='departments_led', to='users.teacher')),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='ClassGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(editable=False, help_text="Auto-generated name like '2025-G9'.", max_length=20, unique=True, verbose_name='Class Group Name')),
                ('academic_year', models.ForeignKey(help_text='The academic year this class group belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='class_groups', to='the_school.academicyear', verbose_name='Academic Year')),
                ('grade_level', models.ForeignKey(help_text='The grade level assigned to this class group.', on_delete=django.db.models.deletion.PROTECT, related_name='class_groups', to='the_school.gradelevel', verbose_name='Grade Level')),
            ],
            options={
                'verbose_name': 'Class Group',
                'verbose_name_plural': 'Class Groups',
                'ordering': ['-academic_year', 'grade_level'],
            },
        ),
        migrations.CreateModel(
            name='SchoolSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('singleton', models.BooleanField(default=True, unique=True)),
                ('school_name', models.CharField(max_length=255, unique=True)),
                ('school_logo', models.ImageField(blank=True, default='school_logos/no_logo.png', null=True, upload_to=the_school.models.school_logo_upload_path)),
                ('school_motto', models.CharField(blank=True, max_length=255, null=True)),
                ('established_year', models.PositiveIntegerField(blank=True, help_text='Year the school was established (must be reasonable).', null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2025)])),
                ('address', models.TextField()),
                ('contact_number', models.CharField(help_text='Phone number (e.g., +123456789).', max_length=20, validators=[django.core.validators.RegexValidator('^\\+?\\d{7,15}$', 'Enter a valid contact number.')])),
                ('email_address', models.EmailField(max_length=254)),
                ('website_url', models.URLField(blank=True, null=True)),
                ('social_media_links', models.JSONField(default=dict, help_text="JSON format (e.g., {'Facebook': 'https://fb.com/school'})", validators=[the_school.models.validate_social_links])),
                ('homepage_intro', models.TextField(blank=True, help_text='Optional welcome message for homepage (index.html).', null=True)),
                ('about_us_title', models.CharField(blank=True, help_text='Optional title override for the About Us page.', max_length=255, null=True)),
                ('about_us_subheading1', models.CharField(blank=True, max_length=255, null=True)),
                ('about_us_paragraph1', models.TextField(blank=True, null=True)),
                ('about_us_paragraph2', models.TextField(blank=True, null=True)),
                ('about_us_subheading2', models.CharField(blank=True, max_length=255, null=True)),
                ('about_us_paragraph3', models.TextField(blank=True, null=True)),
                ('contact_us_title', models.CharField(blank=True, max_length=255, null=True)),
                ('contact_us_paragraph1', models.TextField(blank=True, null=True)),
                ('contact_us_paragraph2', models.TextField(blank=True, null=True)),
                ('privacy_policy', models.TextField(blank=True, help_text='Displayed in privacy_policy.html', null=True)),
                ('terms_of_service', models.TextField(blank=True, help_text='Displayed in terms_of_service.html', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('accreditation_details', models.ManyToManyField(blank=True, related_name='schools', to='the_school.accreditor')),
            ],
            options={
                'verbose_name': 'School Settings',
                'verbose_name_plural': 'School Settings',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of the subject (e.g., Algebra I, Physics).', max_length=100)),
                ('code', models.CharField(editable=False, help_text='Auto-generated subject code (e.g., MAT-G9).', max_length=10, unique=True)),
                ('department', models.ForeignKey(help_text='The department offering this subject (e.g., Mathematics).', on_delete=django.db.models.deletion.PROTECT, related_name='subjects', to='the_school.department')),
                ('grade_level', models.ForeignKey(help_text='The grade level where this subject is taught.', on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='the_school.gradelevel')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
                'ordering': ['grade_level', 'department', 'name'],
            },
        ),
        migrations.AddConstraint(
            model_name='department',
            constraint=models.UniqueConstraint(fields=('code', 'name'), name='unique_department_code_name'),
        ),
        migrations.AlterUniqueTogether(
            name='classgroup',
            unique_together={('academic_year', 'grade_level')},
        ),
        migrations.AddConstraint(
            model_name='schoolsettings',
            constraint=models.UniqueConstraint(fields=('singleton',), name='unique_school_settings_constraint'),
        ),
        migrations.AlterUniqueTogether(
            name='subject',
            unique_together={('department', 'grade_level', 'name')},
        ),
    ]
