# Generated by Django 5.1.1 on 2025-05-05 17:24

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('the_school', '0001_initial'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentEnrollmentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, help_text='Short code like FRESH, TRANSFER, PROMOTED, etc.', max_length=10, unique=True)),
                ('name', models.CharField(help_text='Descriptive name of the enrollment type.', max_length=50)),
                ('description', models.TextField(blank=True, help_text='Optional longer explanation for internal use.', null=True)),
            ],
            options={
                'verbose_name': 'Student Enrollment Type',
                'verbose_name_plural': 'Student Enrollment Types',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='ClassGroupSubjectAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_assigned', models.DateField(default=django.utils.timezone.now, help_text='Date when this subject was assigned to the class group.')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this subject is currently active in the class group.')),
                ('academic_year', models.ForeignKey(help_text='The academic year this assignment applies to.', on_delete=django.db.models.deletion.CASCADE, to='the_school.academicyear')),
                ('class_group', models.ForeignKey(help_text='Class group to which the subject is being assigned.', on_delete=django.db.models.deletion.CASCADE, related_name='subject_assignments', to='the_school.classgroup')),
                ('subject', models.ForeignKey(help_text='The subject being taught to the class group.', on_delete=django.db.models.deletion.CASCADE, related_name='class_assignments', to='the_school.subject')),
            ],
            options={
                'verbose_name': 'ClassGroup Subject Assignment',
                'verbose_name_plural': 'ClassGroup Subject Assignments',
                'ordering': ['-date_assigned'],
                'unique_together': {('class_group', 'subject', 'academic_year')},
            },
        ),
        migrations.CreateModel(
            name='ClassGroupTeacherAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_assigned', models.DateField(default=django.utils.timezone.now, help_text='The date the assignment was created.')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this assignment is currently active.')),
                ('academic_year', models.ForeignKey(blank=True, help_text='Optional academic year of the assignment.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='the_school.academicyear')),
                ('class_group', models.ForeignKey(help_text='The class group the teacher will lead.', on_delete=django.db.models.deletion.CASCADE, related_name='teacher_assignments', to='the_school.classgroup')),
                ('teacher', models.ForeignKey(help_text='The teacher being assigned to a class group.', on_delete=django.db.models.deletion.CASCADE, related_name='classgroup_assignments', to='users.teacher')),
            ],
            options={
                'verbose_name': 'Class Group Teacher Assignment',
                'verbose_name_plural': 'Class Group Teacher Assignments',
                'ordering': ['-date_assigned'],
                'unique_together': {('class_group', 'academic_year'), ('teacher', 'academic_year')},
            },
        ),
        migrations.CreateModel(
            name='ClassGroupStudentEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateField(help_text='Date when the student was enrolled in this class group.')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if this enrollment is currently active.')),
                ('notes', models.TextField(blank=True, help_text='Optional notes for this enrollment (manual remarks, exceptions, etc.).', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this record was last updated.')),
                ('class_group', models.ForeignKey(help_text='The class group the student is assigned to.', on_delete=django.db.models.deletion.CASCADE, related_name='student_enrollments', to='the_school.classgroup')),
                ('student', models.ForeignKey(help_text='The student being enrolled.', on_delete=django.db.models.deletion.CASCADE, related_name='class_group_enrollments', to='users.student')),
                ('enrollment_type', models.ForeignKey(help_text='The reason or method of enrollment (e.g., Transfer, Fresh).', on_delete=django.db.models.deletion.PROTECT, to='enrollments.studentenrollmenttype')),
            ],
            options={
                'verbose_name': 'Class Group Student Enrollment',
                'verbose_name_plural': 'Class Group Student Enrollments',
                'ordering': ['-enrollment_date', 'student'],
                'unique_together': {('student', 'class_group')},
            },
        ),
        migrations.CreateModel(
            name='TeacherDepartmentEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_assigned', models.DateField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('academic_year', models.ForeignKey(blank=True, help_text='Optional: Academic year for this enrollment (e.g., 2025).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='the_school.academicyear')),
                ('department', models.ForeignKey(help_text='The department the teacher is assigned to.', on_delete=django.db.models.deletion.CASCADE, related_name='teacher_enrollments', to='the_school.department')),
                ('teacher', models.ForeignKey(help_text='The teacher being assigned.', on_delete=django.db.models.deletion.CASCADE, related_name='department_enrollments', to='users.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Department Enrollment',
                'verbose_name_plural': 'Teacher Department Enrollments',
                'ordering': ['-date_assigned'],
                'constraints': [models.UniqueConstraint(fields=('teacher', 'department', 'academic_year'), name='unique_teacher_department_enrollment')],
            },
        ),
        migrations.CreateModel(
            name='TeacherSubjectAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_assigned', models.DateField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('academic_year', models.ForeignKey(blank=True, help_text='Optional: The academic year of the assignment.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='the_school.academicyear')),
                ('subject', models.ForeignKey(help_text='The subject this teacher is responsible for.', on_delete=django.db.models.deletion.CASCADE, related_name='assigned_teachers', to='the_school.subject')),
                ('teacher', models.OneToOneField(help_text='The teacher being assigned to a subject.', on_delete=django.db.models.deletion.CASCADE, related_name='subject_assignment', to='users.teacher')),
            ],
            options={
                'verbose_name': 'Teacher Subject Assignment',
                'verbose_name_plural': 'Teacher Subject Assignments',
                'ordering': ['-date_assigned'],
                'unique_together': {('teacher', 'academic_year')},
            },
        ),
    ]
